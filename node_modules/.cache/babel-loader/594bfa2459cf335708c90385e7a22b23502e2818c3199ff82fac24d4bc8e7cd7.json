{"ast":null,"code":"var _jsxFileName = \"/home/drevil/react/drum-machine-2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Display from './components/display';\nimport Drumpad from './components/drumpad';\nimport './App.css';\n\n// font imports\n\nimport \"./fonts/Ledsim-JRz7o.ttf\";\n\n// web audio\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst audio_ctx = new AudioContext();\nfunction App() {\n  _s();\n  /*\n    (function initAudios() {\n      const promises = drumObj.drums.map(drum => {\n        return fetch(\"../public\" + drum.src) // fetch the file\n          .then(resp => resp.arrayBuffer()) // as an arrayBuffer\n          .then(buf => drum.audio_ctx.decodeAudioData(buf)) // then decode its audio data\n          .then(AudioBuf => {\n            drum.buf = AudioBuf; // store the audioBuffer (won't change)\n            return Promise.resolve(drum); // done\n          });\n      });\n      return Promise.all(promises); // when all are loaded\n    })();\n    \n  \n  \n    const drumObj = {\n     \n      generate_sound: (drum) => {\n        const source = drumObj.audio_ctx.createBufferSource();\n        source.buffer = drum.buf;\n        source.connect(drumObj.gain); \n        drum.source = source;\n        source.start(0);\n      },   \n      drums: [{\n          pad: 1,\n          id: \"Q\",\n          keycode: 81,\n          label: \"High Tom\",\n          src: \"/audio/hitom.wav\"\n        },\n        {\n          pad: 2,\n          id: \"W\",\n          keycode: 87,\n          label: \"Mid Tom\",\n          src: \"/audio/midtom2.wav\"\n        },\n        {\n          pad: 3,\n          id: \"E\",\n          keycode: 69,\n          label: \"Low Tom\",\n          src: \"/audio/loetom.wav\"\n        },\n        {\n          pad: 4,\n          id: \"A\",\n          keycode: 65,\n          label: \"Kick\",\n          src: \"/audio/808bd2.wav\"\n        },\n        {\n          pad: 5,\n          id: \"S\",\n          keycode: 83,\n          label: \"Open High Hat\",\n          src: \"/audio/707-ohh.wav\"\n        },\n        {\n          pad: 6,\n          id: \"D\",\n          keycode: 68,\n          label: \"Foot High Hat \",\n          src: \"/audio/big-foot-hh.wav\"\n        },\n        {\n          pad: 7,\n          id: \"Z\",\n          keycode: 90,\n          label: \"Snare\",\n          src: \"/audio/brass-sd2.wav\"\n        },\n        {\n          pad: 8,\n          id: \"X\",\n          keycode: 88,\n          label: \"Bright Open High Hat\",\n          src: \"/audio/909-bright-ohh.wav\"\n        },\n        {\n          pad: 9,\n          id: \"C\",\n          keycode: 67,\n          label: \"Collapsed Hat\",\n          src: \"/audio/909-collapsed-hat.wav\"\n        }\n  \n      ],  \n      record: function record(e) {\n        const recordBtn = document.getElementById('record');\n        const chunks = [];\n        const recorder = new MediaRecorder(drumObj.streamNode.stream);\n      \n        recorder.ondataavailable = e => chunks.push(e.data);\n        recorder.onstop = e => {\n  \n          // export our recording to a new <audio> element\n          const blob = new Blob(chunks);\n          const url = URL.createObjectURL(blob);\n          const a = new Audio(url);\n          a.controls = true; // enable audio controls for new <audio> element\n          document.getElementById('records').appendChild(a);\n  \n          // reset default click handler\n          recordBtn.onclick = drumObj.record;\n          // add styling to record button to indicate start recording\n  \n        }\n        recordBtn.onclick = function () {\n          recorder.stop();\n        };\n        // start recording\n        recorder.start();\n        // add styling to record button to indicate stop recording\n      }\n    }; // end drumObj block\n  \n    \n    drumObj.gain = drumObj.audio_ctx.createGain();\n    drumObj.gain.gain.value = 1;\n    drumObj.gain.connect(drumObj.audio_ctx.destination);\n  \n    // for recording\n    drumObj.streamNode = drumObj.audio_ctx.createMediaStreamDestination();\n    drumObj.gain.connect(drumObj.streamNode);\n  \n    document.getElementById('record').onclick = drumObj.record;\n  \n  */\n\n  const [display, setDisplay] = useState(\"\");\n  const [volume, setVolume] = useState(1);\n  const [recording, setRecording] = useState(false);\n  const handleVolumeControl = e => {\n    setVolume(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: \"React Drum Machine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"drum-machine\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"drumpad-container\",\n        children: drumObj.drums.map(drum => /*#__PURE__*/_jsxDEV(Drumpad, {\n          drum: drum,\n          drumObj: drumObj,\n          displayHandler: setDisplay,\n          volume: volume\n        }, drum.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Display, {\n        value: display,\n        volume: volume,\n        rec: recording,\n        recordHandler: setRecording,\n        handleChange: handleVolumeControl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nBZAy0qoOhHOvww5S3sRGm/Drz0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Display","Drumpad","audio_ctx","AudioContext","App","display","setDisplay","volume","setVolume","recording","setRecording","handleVolumeControl","e","target","value","drumObj","drums","map","drum","id"],"sources":["/home/drevil/react/drum-machine-2/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Display from './components/display';\nimport Drumpad from './components/drumpad';\nimport './App.css';\n\n// font imports\n\nimport \"./fonts/Ledsim-JRz7o.ttf\";\n\n// web audio\n\nconst audio_ctx = new AudioContext();\n\n\nfunction App() {\n\n  \n/*\n  (function initAudios() {\n    const promises = drumObj.drums.map(drum => {\n      return fetch(\"../public\" + drum.src) // fetch the file\n        .then(resp => resp.arrayBuffer()) // as an arrayBuffer\n        .then(buf => drum.audio_ctx.decodeAudioData(buf)) // then decode its audio data\n        .then(AudioBuf => {\n          drum.buf = AudioBuf; // store the audioBuffer (won't change)\n          return Promise.resolve(drum); // done\n        });\n    });\n    return Promise.all(promises); // when all are loaded\n  })();\n  \n\n\n  const drumObj = {\n   \n    generate_sound: (drum) => {\n      const source = drumObj.audio_ctx.createBufferSource();\n      source.buffer = drum.buf;\n      source.connect(drumObj.gain); \n      drum.source = source;\n      source.start(0);\n    },   \n    drums: [{\n        pad: 1,\n        id: \"Q\",\n        keycode: 81,\n        label: \"High Tom\",\n        src: \"/audio/hitom.wav\"\n      },\n      {\n        pad: 2,\n        id: \"W\",\n        keycode: 87,\n        label: \"Mid Tom\",\n        src: \"/audio/midtom2.wav\"\n      },\n      {\n        pad: 3,\n        id: \"E\",\n        keycode: 69,\n        label: \"Low Tom\",\n        src: \"/audio/loetom.wav\"\n      },\n      {\n        pad: 4,\n        id: \"A\",\n        keycode: 65,\n        label: \"Kick\",\n        src: \"/audio/808bd2.wav\"\n      },\n      {\n        pad: 5,\n        id: \"S\",\n        keycode: 83,\n        label: \"Open High Hat\",\n        src: \"/audio/707-ohh.wav\"\n      },\n      {\n        pad: 6,\n        id: \"D\",\n        keycode: 68,\n        label: \"Foot High Hat \",\n        src: \"/audio/big-foot-hh.wav\"\n      },\n      {\n        pad: 7,\n        id: \"Z\",\n        keycode: 90,\n        label: \"Snare\",\n        src: \"/audio/brass-sd2.wav\"\n      },\n      {\n        pad: 8,\n        id: \"X\",\n        keycode: 88,\n        label: \"Bright Open High Hat\",\n        src: \"/audio/909-bright-ohh.wav\"\n      },\n      {\n        pad: 9,\n        id: \"C\",\n        keycode: 67,\n        label: \"Collapsed Hat\",\n        src: \"/audio/909-collapsed-hat.wav\"\n      }\n\n    ],  \n    record: function record(e) {\n      const recordBtn = document.getElementById('record');\n      const chunks = [];\n      const recorder = new MediaRecorder(drumObj.streamNode.stream);\n    \n      recorder.ondataavailable = e => chunks.push(e.data);\n      recorder.onstop = e => {\n\n        // export our recording to a new <audio> element\n        const blob = new Blob(chunks);\n        const url = URL.createObjectURL(blob);\n        const a = new Audio(url);\n        a.controls = true; // enable audio controls for new <audio> element\n        document.getElementById('records').appendChild(a);\n\n        // reset default click handler\n        recordBtn.onclick = drumObj.record;\n        // add styling to record button to indicate start recording\n\n      }\n      recordBtn.onclick = function () {\n        recorder.stop();\n      };\n      // start recording\n      recorder.start();\n      // add styling to record button to indicate stop recording\n    }\n  }; // end drumObj block\n\n  \n  drumObj.gain = drumObj.audio_ctx.createGain();\n  drumObj.gain.gain.value = 1;\n  drumObj.gain.connect(drumObj.audio_ctx.destination);\n\n  // for recording\n  drumObj.streamNode = drumObj.audio_ctx.createMediaStreamDestination();\n  drumObj.gain.connect(drumObj.streamNode);\n\n  document.getElementById('record').onclick = drumObj.record;\n\n*/  \n\n  const [display, setDisplay] = useState(\"\");\n  const [volume, setVolume] = useState(1);\n  const [recording, setRecording] = useState(false);\n\n  const handleVolumeControl = (e) => {\n    setVolume(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">React Drum Machine</div>\n      <div id=\"drum-machine\">\n        <div id=\"drumpad-container\">\n          {drumObj.drums.map((drum) => <Drumpad key={drum.id} drum= {drum} drumObj={drumObj} displayHandler={setDisplay} volume={volume}/>)}\n        </div>\n        <Display value={display} volume={volume} rec={recording} recordHandler={setRecording} handleChange={handleVolumeControl}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAO,WAAW;;AAElB;;AAEA,OAAO,0BAA0B;;AAEjC;AAAA;AAEA,MAAMC,SAAS,GAAG,IAAIC,YAAY,EAAE;AAGpC,SAASC,GAAG,GAAG;EAAA;EAGfvC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMY,mBAAmB,GAAIC,CAAC,IAAK;IACjCJ,SAAS,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAK,SAAS,EAAC,YAAY;MAAA,UAAC;IAAkB;MAAA;MAAA;MAAA;IAAA,QAAM,eACpD;MAAK,EAAE,EAAC,cAAc;MAAA,wBACpB;QAAK,EAAE,EAAC,mBAAmB;QAAA,UACxBC,OAAO,CAACC,KAAK,CAACC,GAAG,CAAEC,IAAI,iBAAK,QAAC,OAAO;UAAe,IAAI,EAAGA,IAAK;UAAC,OAAO,EAAEH,OAAQ;UAAC,cAAc,EAAET,UAAW;UAAC,MAAM,EAAEC;QAAO,GAAnFW,IAAI,CAACC,EAAE;UAAA;UAAA;UAAA;QAAA,QAA8E;MAAC;QAAA;QAAA;QAAA;MAAA,QAC7H,eACN,QAAC,OAAO;QAAC,KAAK,EAAEd,OAAQ;QAAC,MAAM,EAAEE,MAAO;QAAC,GAAG,EAAEE,SAAU;QAAC,aAAa,EAAEC,YAAa;QAAC,YAAY,EAAEC;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QACtH;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GA1JQP,GAAG;AAAA,KAAHA,GAAG;AA4JZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}